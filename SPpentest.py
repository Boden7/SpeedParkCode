import jwt
import requests
from SPauth import SECRET_KEY
from SPencrypt import encrypt_data, decrypt_data

BASE_URL = "http://127.0.0.1:5000"

def test_jwt_forgery(url: str):
    fake_token = jwt.encode({"user_id": 1, "exp": 9999999999}, "wrong_key", algorithm="HS256")
    headers = {"Authorization": f"Bearer {fake_token}"}
    response = requests.get(f"{url}/parking_availability", headers=headers)
    if response.status_code != 401:
        print("[!] JWT forgery possible!")
    else:
        print("[+] JWT forgery prevented.")

def test_sql_injection(url: str, endpoint: str):
    payloads = ["' OR '1'='1' --", "'; DROP TABLE users; --"]
    for payload in payloads:
        response = requests.post(f"{url}/{endpoint}", json={"username": payload, "password": "test"})
        if "Invalid Credentials" not in response.text and "error" not in response.text.lower():
            print(f"[!] SQL Injection possible with payload: {payload}")
        else:
            print(f"[+] No SQL Injection with payload: {payload}")

def test_brute_force(url: str, endpoint: str, username: str):
    for i in range(10):
        response = requests.post(f"{url}/{endpoint}", json={"username": username, "password": f"test{i}"})
        if response.status_code == 429:
            print("[+] Rate limiting detected.")
            break
    else:
        print("[!] Rate limiting not enforced!")

def test_encryption():
    data = "test@example.com"
    encrypted = encrypt_data(data)
    decrypted = decrypt_data(encrypted)
    if data == decrypted:
        print("[+] Encryption/decryption successful.")
    else:
        print("[!] Encryption/decryption failed!")

def test_parking_endpoint(url: str):
    fake_token = jwt.encode({"user_id": 1, "exp": 9999999999}, "wrong_key", algorithm="HS256")
    headers = {"Authorization": f"Bearer {fake_token}"}
    response = requests.get(f"{url}/parking_availability", headers=headers)
    if response.status_code != 401:
        print("[!] Parking endpoint vulnerable to fake tokens!")
    else:
        print("[+] Parking endpoint secure against fake tokens.")

if __name__ == "__main__":
    print("Starting penetration tests...")
    test_jwt_forgery(BASE_URL)
    test_sql_injection(BASE_URL, "login")
    test_brute_force(BASE_URL, "login", "testuser")
    test_encryption()
    test_parking_endpoint(BASE_URL)
    print("Penetration tests completed.")
